// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: links.sql

package sqldb

import (
	"context"
)

const createLink = `-- name: CreateLink :one
INSERT INTO links (
  original_url,
  hash,
  user_id
) VALUES (
  $1, $2, $3
)
RETURNING id, original_url, hash, created_at, updated_at, user_id
`

type CreateLinkParams struct {
	OriginalUrl string `json:"original_url"`
	Hash        string `json:"hash"`
	UserID      int64  `json:"user_id"`
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (Link, error) {
	row := q.db.QueryRow(ctx, createLink, arg.OriginalUrl, arg.Hash, arg.UserID)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.Hash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const createQRCode = `-- name: CreateQRCode :one
INSERT INTO qr_codes (
  link_id,
  color,
  background,
  smoothing
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, link_id, color, background, smoothing
`

type CreateQRCodeParams struct {
	LinkID     int64    `json:"link_id"`
	Color      string   `json:"color"`
	Background string   `json:"background"`
	Smoothing  *float64 `json:"smoothing"`
}

func (q *Queries) CreateQRCode(ctx context.Context, arg CreateQRCodeParams) (QrCode, error) {
	row := q.db.QueryRow(ctx, createQRCode,
		arg.LinkID,
		arg.Color,
		arg.Background,
		arg.Smoothing,
	)
	var i QrCode
	err := row.Scan(
		&i.ID,
		&i.LinkID,
		&i.Color,
		&i.Background,
		&i.Smoothing,
	)
	return i, err
}

const getLinkByHash = `-- name: GetLinkByHash :one
SELECT id, original_url, hash, created_at, updated_at, user_id FROM links
WHERE hash = $1 LIMIT 1
`

func (q *Queries) GetLinkByHash(ctx context.Context, hash string) (Link, error) {
	row := q.db.QueryRow(ctx, getLinkByHash, hash)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.OriginalUrl,
		&i.Hash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getLinksByUserID = `-- name: GetLinksByUserID :many
SELECT id, original_url FROM links
WHERE user_id = $1
`

type GetLinksByUserIDRow struct {
	ID          int64  `json:"id"`
	OriginalUrl string `json:"original_url"`
}

func (q *Queries) GetLinksByUserID(ctx context.Context, userID int64) ([]GetLinksByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getLinksByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLinksByUserIDRow
	for rows.Next() {
		var i GetLinksByUserIDRow
		if err := rows.Scan(&i.ID, &i.OriginalUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
